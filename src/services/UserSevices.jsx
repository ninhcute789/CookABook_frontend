import toast from "react-hot-toast";
import axiosInstance from "./axiosInstance";

const getUsersById = async (id) => {
  try {
    const token = localStorage.getItem("token");
    const response = await axiosInstance.get(`/users/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    // toast.success("üéâ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    return response.data.data;
  } catch (error) {
    console.error("‚ùå Error in getUser:", error);
    return null;
  }
};

const getAllArticlesByUserId = async (
  id,
  page,
  size,
  setArticles,
  setTotalPages,
  setTotalElements
) => {
  try {
    const token = localStorage.getItem("token");
    const response = await axiosInstance.get(
      `/users/${id}/articles?page=${page}&size=${size}`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    // toast.success("üéâ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    setArticles(response.data.data.data);
    setTotalPages(response.data.data.meta.totalPages);
    setTotalElements(response.data.data.meta.totalElements);

    // return response.data;
  } catch (error) {
    console.error("‚ùå Error in getUser:", error);
    return null;
  }
};

const fetchUsers = async () => {
  try {
    const token = localStorage.getItem("token");
    const res = await axiosInstance.get("/users", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    toast.success(
      <div className="w-90">üéâ T·∫£i danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng!</div>
    );
    return res.data?.data?.data || [];

    // ƒê·∫£m b·∫£o d·ªØ li·ªáu t·ª´ API l√† m·ªôt m·∫£ng
    //   setUsers(res.data?.data?.data || []);
    // setUsers(Array.isArray(res.data?.data?.data) ? res.data?.data?.data : []);
    // console.log("Danh s√°ch ng∆∞·ªùi d√πng - adminNews:", res.data?.data?.data);
  } catch (error) {
    toast.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
    console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
    //   setUsers([]);
  }
};

const handleUpdateUser = async (
  id,
  password,
  name,
  gender,
  dob,
  email,
  avatar,
  setUser
  // setEditingUserId
) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y token!");
      return;
    }

    const res = await axiosInstance.put(
      "/users",
      {
        id,
        password,
        name,
        gender,
        dob,
        email,
        avatar,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      }
    );
    console.log("avatar ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", res.data.data.avatar);
    console.log("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", res.data);
    const handleUpdate = (updatedUser) => {
      setUser((prevUser) => {
        if (!prevUser || typeof prevUser !== "object") {
          console.error(
            "‚ùå L·ªói: `prevUser` kh√¥ng ph·∫£i l√† m·ªôt object!",
            prevUser
          );
          return {};
        }

        console.log("üîÑ Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", prevUser);

        const updatedUserData = { ...prevUser, ...updatedUser }; // ‚úÖ G·ªôp d·ªØ li·ªáu c≈© v·ªõi m·ªõi

        console.log("‚úÖ Sau khi c·∫≠p nh·∫≠t:", updatedUserData);
        return updatedUserData;
      });
    };

    handleUpdate(res.data.data); // C·∫≠p nh·∫≠t danh s√°ch user
    // const handleClose = () => {
    //   setEditingUserId(null);
    // };
    // handleClose();
    // alert("üéâ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    toast.success("üéâ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
    toast.error(
      "‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:",
      error.response?.data || error.message
    );
  }
};

const getAllOrdersByUserId = async (
  userId,
  page,
  size,
  change,
  setTotalPages
) => {
  try {
    const token = localStorage.getItem("token");
    const response = await axiosInstance.get(
      `/users/${userId}/orders?page=${page}&size=${size}&sort=createdAt,${change}`,

      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      },
      { withCredentials: true }
    );
    setTotalPages(response.data.data.meta.totalPages);
    return response.data.data.data;
    // return response.data;
  } catch (error) {
    console.error("‚ùå Error in getUser:", error);
    return null;
  }
};

const getTotalUserQuantity = async (setTotalUsers) => {
  try {
    const token = localStorage.getItem("token");
    const res = await axiosInstance.get("/users", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    setTotalUsers(res.data?.data?.meta?.totalElements);
  } catch (error) {
    console.error("L·ªói khi t·∫£i s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng:", error);
  }
};

const handleUpdatePassword = async (
  username,
  oldPassword,
  newPassword,
  setUser
  // setEditingUserId
) => {
  try {
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y token!");
      return;
    }

    const res = await axiosInstance.put(
      "/users/update-password",
      {
        username,
        oldPassword,
        newPassword,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      }
    );
    const handleUpdate = (updatedUser) => {
      setUser((prevUser) => {
        if (!prevUser || typeof prevUser !== "object") {
          console.error(
            "‚ùå L·ªói: `prevUser` kh√¥ng ph·∫£i l√† m·ªôt object!",
            prevUser
          );
          return {};
        }

        console.log("üîÑ Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", prevUser);

        const updatedUserData = { ...prevUser, ...updatedUser }; // ‚úÖ G·ªôp d·ªØ li·ªáu c≈© v·ªõi m·ªõi

        console.log("‚úÖ Sau khi c·∫≠p nh·∫≠t:", updatedUserData);
        return updatedUserData;
      });
    };

    handleUpdate(res.data.data);
    toast.success("üéâ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error.response.data.error);
    toast.error(error.response.data.error);
  }
};

export {
  getUsersById,
  fetchUsers,
  getAllArticlesByUserId,
  handleUpdateUser,
  getAllOrdersByUserId,
  getTotalUserQuantity,
  handleUpdatePassword,
};
