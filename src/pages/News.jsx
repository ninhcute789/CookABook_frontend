import React, { useEffect, useRef, useState } from "react";
// import { newsArticles } from "../data/dataNews.js";
import { NavLink, useLocation } from "react-router";
import { IoIosArrowBack } from "react-icons/io";
import { FaSearch } from "react-icons/fa";
import axios from "axios";
// import ArticleSideBar from "../components/common/ArticleSideBar.jsx";
import SidebarArticles from "../components/sideBar/SidebarArticles.jsx";

// const newsArticles = [
//   {
//     id: 1,
//     title: "‚Äôƒê∆∞·ªùng r·ªông th√™nh thang‚Äô: ·ª®ng d·ª•ng tri·∫øt l√Ω Ph·∫≠t gi√°o v√†o ƒë·ªùi s·ªëng",
//     author: "Hai N√∫a",
//     date: "03/03/2025",
//     image: s1,
//     content:
//       "Cu·ªën s√°ch m·ªõi c·ªßa Murakami ƒë√£ l·∫≠p k·ª∑ l·ª•c v·ªÅ s·ªë l∆∞·ª£ng b√°n ra trong ng√†y ƒë·∫ßu ti√™n. N·ªôi dung k·ªÉ v·ªÅ cu·ªôc h√†nh tr√¨nh c·ªßa m·ªôt ng∆∞·ªùi ƒë√†n √¥ng c√¥ ƒë∆°n, kh√°m ph√° nh·ªØng g√≥c khu·∫•t trong t√¢m h·ªìn khi ƒë·ªëi m·∫∑t v·ªõi qu√° kh·ª© v√† nh·ªØng gi·∫•c m∆° k·ª≥ l·∫°. V·ªõi phong c√°ch vi·∫øt ƒë·∫∑c tr∆∞ng, t√°c ph·∫©m mang ƒë·∫øn s·ª± h√≤a tr·ªôn gi·ªØa th·ª±c t·∫ø v√† huy·ªÅn ·∫£o, khi·∫øn ƒë·ªôc gi·∫£ kh√¥ng th·ªÉ r·ªùi m·∫Øt. C·ªët truy·ªán s√¢u s·∫Øc, nh√¢n v·∫≠t c√≥ chi·ªÅu s√¢u, c√πng nh·ªØng th√¥ng ƒëi·ªáp tri·∫øt l√Ω v·ªÅ cu·ªôc s·ªëng, cu·ªën s√°ch h·ª©a h·∫πn tr·ªü th√†nh m·ªôt trong nh·ªØng t√°c ph·∫©m ƒë√°ng ƒë·ªçc nh·∫•t nƒÉm nay.",
//   },
//   {
//     id: 2,
//     title: "Top 5 cu·ªën s√°ch gi√∫p b·∫°n th√†nh c√¥ng trong nƒÉm 2025",
//     author: "Tr·∫ßn H√†",
//     date: "01/03/2025",
//     image: s2,
//     content:
//       "N·∫øu b·∫°n mu·ªën ph√°t tri·ªÉn b·∫£n th√¢n trong nƒÉm 2025, ƒë√¢y l√† 5 cu·ªën s√°ch b·∫°n kh√¥ng th·ªÉ b·ªè l·ª° trong nƒÉm 2025 vi·∫øt b·ªüi Tr·∫ßn H√†...",
//   },
//   {
//     id: 3,
//     title: "Top 5 cu·ªën s√°ch gi√∫p b·∫°n th√†nh c√¥ng trong nƒÉm 2025",
//     author: "Tr·∫ßn H√†",
//     date: "01/03/2025",
//     image: s3,
//     content:
//       "N·∫øu b·∫°n mu·ªën ph√°t tri·ªÉn b·∫£n th√¢n trong nƒÉm 2025, ƒë√¢y l√† 5 cu·ªën s√°ch b·∫°n kh√¥ng th·ªÉ b·ªè l·ª°...",
//   },
//   {
//     id: 4,
//     title: "Top 5 cu·ªën s√°ch gi√∫p b·∫°n th√†nh c√¥ng trong nƒÉm 2025",
//     author: "Tr·∫ßn H√†",
//     date: "01/03/2025",
//     image: s4,
//     content:
//       "N·∫øu b·∫°n mu·ªën ph√°t tri·ªÉn b·∫£n th√¢n trong nƒÉm 2025, ƒë√¢y l√† 5 cu·ªën s√°ch b·∫°n kh√¥ng th·ªÉ b·ªè l·ª°...",
//   },
//   {
//     id: 5,
//     title: "Top 5 cu·ªën s√°ch gi√∫p b·∫°n th√†nh c√¥ng trong nƒÉm 2025",
//     author: "Tr·∫ßn H√†",
//     date: "01/03/2025",
//     image: { s2 },
//     content:
//       "N·∫øu b·∫°n mu·ªën ph√°t tri·ªÉn b·∫£n th√¢n trong nƒÉm 2025, ƒë√¢y l√† 5 cu·ªën s√°ch b·∫°n kh√¥ng th·ªÉ b·ªè l·ª°...",
//   },
// ];
const ScrollToTop = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 70,
      behavior: "smooth",
    });
  }, [pathname]);

  return null;
};

const News = () => {
  const [articles, setArticles] = useState([]);
  const [loading, setLoading] = useState(true);

  const [article, setArticle] = useState();


  useEffect(() => {
    const fetchArticles = async () => {
      try {
        const token = localStorage.getItem("token");
        // if (!token) {
        //   console.error(
        //     "‚ùå Kh√¥ng t√¨m th·∫•y token! Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p."
        //   );
        //   return;
        // }

        const res = await axios.get("http://localhost:8080/api/v1/articles", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        console.log("‚úÖ D·ªØ li·ªáu API tr·∫£ v·ªÅ:", res.data);
        setArticles(res.data?.data?.data || []);
      } catch (error) {
        console.error(
          "‚ùå L·ªói khi l·∫•y danh s√°ch b√†i b√°o:",
          error.response?.data || error.message
        );
      } finally {
        setLoading(false);
      }
    };

    fetchArticles();
  }, []);

  const [selectedArticle, setSelectedArticle] = useState(null);
  const truncateText = (text, wordLimit) => {
    const words = text.split(" ");
    return words.length > wordLimit
      ? words.slice(0, wordLimit).join(" ") + "..."
      : text;
  };
  const [isFocused, setIsFocused] = useState(false);
  const inputRef = useRef(null);

  if (loading) return <p className="text-center">ƒêang t·∫£i...</p>;

  return (
    <div>
      <ScrollToTop />
      <div className=" px-10 mx-auto py-5  bg-orange-50">
        {/* <h1 className="text-3xl font-bold mb-4">Tin t·ª©c v·ªÅ s√°ch</h1> */}

        <header className="news-header w-11/12 mx-auto shadow-md  top-5 z-50 backdrop-blur-md rounded-2xl bg-white opacity-90">
          <div className=" mx-auto flex items-center justify-between p-4">
            {/* Logo / T√™n trang */}
            <NavLink
              onClick={() => {
                setSelectedArticle(null),
                  window.scrollTo({
                    top: 0,
                    behavior: "smooth",
                  });
              }}
              className="text-2xl font-bold text-gray-800 hover:cursor-pointer"
            >
              üìö Tin t·ª©c
            </NavLink>

            {/* Thanh ƒëi·ªÅu h∆∞·ªõng */}
            {/* <nav className="hidden md:flex space-x-6">
            <a
              href="#"
              className="text-gray-700 hover:text-blue-600 transition"
            >
              Trang ch·ªß
            </a>
            <a
              href="#"
              className="text-gray-700 hover:text-blue-600 transition"
            >
              Danh m·ª•c
            </a>
            <a
              href="#"
              className="text-gray-700 hover:text-blue-600 transition"
            >
              B√†i vi·∫øt n·ªïi b·∫≠t
            </a>
            <a
              href="#"
              className="text-gray-700 hover:text-blue-600 transition"
            >
              Li√™n h·ªá
            </a>
          </nav> */}

            {/* √î t√¨m ki·∫øm */}
            <div className="relative ">
              <input
                ref={inputRef} // Ref cho input
                type="text"
                placeholder="T√¨m b√†i vi·∫øt..."
                className={`transition-all duration-300 ease-in-out border rounded-full px-4 py-2 shadow-sm outline-none 
                ${isFocused ? "w-80 border-gray-400" : "w-48 border-gray-300"}`}
                onFocus={() => setIsFocused(true)}
                onBlur={() => setIsFocused(false)}
              />
              <FaSearch className="absolute right-3 top-2.5 text-gray-700 translate-y-0.5" />
            </div>
          </div>
        </header>

        {!selectedArticle ? (
          articles.length === 0 ? (
            <p className="text-center">Kh√¥ng c√≥ b√†i vi·∫øt n√†o.</p>
          ) : (
          <div className=" w-11/12 mx-auto">
            <div className="grid xl:grid-cols-4 md:grid-cols-3 sm:grid-cols-2 grid-col-1 ">
              {articles.slice().reverse().map((article) => ( // ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± b√†i vi·∫øt
                <div
                  key={article.id}
                  className="mt-5 mx-3 rounded-2xl inset-shadow-xl shadow-lg border-y-4 border-yellow-500 p-6 bg-white"
                >
                  <img
                    src={article.imageURL}
                    alt={article.title}
                    className="h-50 object-cover mx-auto rounded shadow-gray-100 shadow-sm"
                  />
                  <div className="text-xl font-medium my-4 line-clamp-1">
                    {article.title}
                  </div>

                  <p className="text-gray-700 mb-5 line-clamp-1">
                    {article.content}
                  </p>
                  <div className="flex justify-between">
                    <div className="font-bold hover:underline cursor-pointer text-[12px]">
                      {article?.user?.name || "Kh√¥ng r√µ t√°c gi·∫£"}
                      {console.log(article?.user?.name)}
                    </div>
                    <div className="font-bold text-[12px]">
                      {article.updatedAt ? article.updatedAt : article.createdAt}
                    </div>
                  </div>
                  <NavLink
                    onClick={() => {
                      setSelectedArticle(true),
                        setArticle(article),
                        window.scrollTo({
                          top: 70,
                          behavior: "smooth",
                        });
                    }}
                    className=" text-yellow-500 hover:underline "
                  >
                    ƒê·ªçc th√™m
                  </NavLink>
                </div>
              ))}
            </div>
          </div>)
        ) : (
          <div className="flex w-11/12 mx-auto">
            <div className="w-4/5">
              <button
                onClick={() => {
                  setSelectedArticle(null),
                    window.scrollTo({
                      top: 0,
                      behavior: "smooth",
                    });
                }}
                className="mb-4 px-4 py-2 hover:opacity-50 mt-5
            bg-gray-200 rounded hover:cursor-pointer"
              >
                <IoIosArrowBack className="inline-block -translate-y-0.5 -translate-x-1" />
                Quay l·∫°i
              </button>
              <h2 className="text-2xl font-bold ">{article.title}</h2>
              <p className="text-gray-600">
                B·ªüi {article?.user?.name || "Kh√¥ng r√µ"} - {article.createdAt}
              </p>
              <img
                src={article.imageURL}
                alt={article.title}
                className=" max-h-96 object-cover rounded-md my-4 mx-auto"
              />
              <p className="min-h-screen">{article.content}</p>
            </div>
            <SidebarArticles
              newsArticles={articles} // ‚úÖ Truy·ªÅn d·ªØ li·ªáu t·ª´ JSON
              setArticle={setArticle}
            />
          </div>
        )}
        {/* Sidebar b√™n ph·∫£i */}
      </div>
      {/* <div>
        <h2>Danh s√°ch b√†i vi·∫øt</h2>
        <ul>
          {articles.map((article) => (
            <li key={article.id}>{article.title}</li>
          ))}
        </ul>
      </div> */}
    </div>
  );
};

export default News;
